{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["GlobalStyle","createGlobalStyle","_templateObject2","StyledApp","styled","div","_templateObject3","lineHeight","arguments","length","undefined","topAdjustment","bottomAdjustment","dynamicBottomCrop","marginBottom","concat","marginTop","css","_templateObject","textCrop","App","react_default","a","createElement","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4mCAGA,IA2CMA,EAAcC,YAAHC,KAgBXC,EAAYC,IAAOC,IAAVC,IA3DE,WAIZ,IAHHC,EAGGC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAHU,IACbG,EAEGH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAFa,EAChBI,EACGJ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADgB,EAWbK,GARa,EASH,IAACN,EAPM,MADF,GAWfO,EAAY,IAAAC,QAbF,EAMH,IAACR,EAHS,MADF,GAWqBI,EAAxB,MAEZK,EAAS,IAAAD,OAAOF,EAAoBD,EAA3B,MAEf,OAAOK,YAAPC,IACiBX,EAWIO,EAIHE,GAgCdG,MAAST,EAAW,EAAG,IAkEdU,mLAhDX,OACEC,EAAAC,EAAAC,cAACpB,EAAD,KACEkB,EAAAC,EAAAC,cAACvB,EAAD,MAEAqB,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,UAAhB,sFAMFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,UAAhB,6DAKFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,UAAhB,6DAKFH,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,oBAAhB,sFAMFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,oBAAhB,wDAKFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,oBAAhB,gEAzCQC,aC7EEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOX,EAAAC,EAAAC,cAACU,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cc168485.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport styled, { css, createGlobalStyle } from \"styled-components\";\n\nconst textCrop = (\n  lineHeight = 1.3,\n  topAdjustment = 0,\n  bottomAdjustment = 0\n) => {\n  const topCrop = 8;\n  const bottomCrop = 8;\n  const cropFontSize = 36;\n  const cropLineHeight = 1.2;\n\n  const dynamicTopCrop =\n    (topCrop + (lineHeight - cropLineHeight) * (cropFontSize / 2)) /\n    cropFontSize;\n\n  const dynamicBottomCrop =\n    (bottomCrop + (lineHeight - cropLineHeight) * (cropFontSize / 2)) /\n    cropFontSize;\n\n  const marginBottom = `-${dynamicTopCrop + topAdjustment}em`;\n\n  const marginTop = `-${dynamicBottomCrop + bottomAdjustment}em`;\n\n  return css`\n    line-height: ${lineHeight};\n\n    &::before,\n    &::after {\n      content: \"\";\n      display: block;\n      height: 0;\n      width: 0;\n    }\n\n    &::before {\n      margin-bottom: ${marginBottom};\n    }\n\n    &::after {\n      margin-top: ${marginTop};\n    }\n  `;\n};\n\nconst GlobalStyle = createGlobalStyle`\n * {\n   box-sizing: border-box;\n }\n\n html, body, #root {\n   margin: 0;\n   padding: 0\n }\n\n body {\n   font-family: \"Muli\", sans-serif;\n   padding: 1em;\n }\n`;\n\nconst StyledApp = styled.div`\n  .container {\n    border: 1px solid magenta;\n    width: 50%;\n\n    :not(:last-child) {\n      margin-bottom: 1em;\n    }\n  }\n\n  .text-crop {\n    ${textCrop(undefined, 0, 0)};\n  }\n\n  .text-1 {\n    font-size: 1em;\n  }\n\n  .text-2 {\n    font-size: 2em;\n  }\n\n  .text-3 {\n    font-size: 4em;\n  }\n`;\n\nclass App extends Component {\n  render() {\n    return (\n      <StyledApp>\n        <GlobalStyle />\n\n        <h1>Without text crop</h1>\n        <div className=\"container\">\n          <span className=\"text-1\">\n            Laborum sint deserunt qui ex consequat proident voluptate et\n            excepteur elit quis.\n          </span>\n        </div>\n\n        <div className=\"container\">\n          <span className=\"text-2\">\n            Nulla laborum nostrud officia id nulla eiusmod minim ea.\n          </span>\n        </div>\n\n        <div className=\"container\">\n          <span className=\"text-3\">\n            Nulla laborum nostrud officia id nulla eiusmod minim ea.\n          </span>\n        </div>\n\n        <h1>With text crop</h1>\n        <div className=\"container\">\n          <span className=\"text-1 text-crop\">\n            Laborum sint deserunt qui ex consequat proident voluptate et\n            excepteur elit quis.\n          </span>\n        </div>\n\n        <div className=\"container\">\n          <span className=\"text-2 text-crop\">\n            Voluptate anim ad nisi nulla reprehenderit laborum.\n          </span>\n        </div>\n\n        <div className=\"container\">\n          <span className=\"text-3 text-crop\">\n            Voluptate anim ad nisi nulla reprehenderit laborum.\n          </span>\n        </div>\n      </StyledApp>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}